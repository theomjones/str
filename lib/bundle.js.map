{"version":3,"file":"bundle.js","sources":["../src/funcs/helpers.js","../src/funcs/slugify.js","../src/funcs/reverse.js","../src/funcs/capitalize.js","../src/funcs/titleize.js","../src/funcs/uncapitalize.js","../src/index.js"],"sourcesContent":["export const assertString = function(s) {\n  if (typeof s != 'string') {\n    throw new Error('input is not a string');\n  }\n};\n\nexport const mutateFirstLetter = function(s, func) {\n  let arr = s.split('');\n  let fl = arr.shift();\n\n  arr.unshift(fl[func]());\n  return arr.join('');\n};\n","import { assertString } from './helpers';\n\n/**\n * Turns a given string into a slug.\n *\n * @param {String} s\n * @param {String} delim\n * @returns {String}\n */\n\nexport default function(s, delim) {\n  assertString(s);\n\n  // To lower\n  s = s.toLowerCase();\n\n  // Create array\n  let arr = s.split(' ');\n\n  // Remove spaces\n  arr = arr.filter(el => {\n    if (el != ' ') return el;\n  });\n\n  let newString;\n\n  if (delim) {\n    newString = arr.join(delim);\n  } else {\n    newString = arr.join('-');\n  }\n\n  // Encode to uri\n  return encodeURIComponent(newString);\n}\n","import { assertString } from './helpers';\n\nexport default function(s) {\n  assertString(s);\n  return s\n    .split('')\n    .reverse()\n    .join('');\n}\n","import { assertString, mutateFirstLetter } from './helpers';\n\n/**\n * Capitalizes a string\n *\n * @param {String} s\n * @param {Boolean} knownString Pass in true if typeof input already known\n *\n */\n\nexport default function(s, knownString) {\n  if (!knownString) {\n    assertString(s);\n  }\n  return mutateFirstLetter(s, 'toUpperCase');\n}\n","import { assertString } from './helpers';\nimport capitalize from './capitalize';\n\nexport default function(s) {\n  assertString(s);\n\n  let words = s.split(' ');\n  let str = [];\n  words.forEach((w, i) => {\n    if (\n      (w != 'a' && w != 'the' && w != 'and' && w != 'an' && w != 'on') ||\n      i === 0\n    ) {\n      str.push(capitalize(w, true));\n    } else {\n      str.push(w);\n    }\n  });\n  return str.join(' ');\n}\n","import { assertString, mutateFirstLetter } from './helpers';\n\n/**\n * Uncapitalizes a string\n *\n * @param {String} s\n * @param {Boolean} knownString Pass in true if typeof input already known\n */\n\nexport default function(s, knownString) {\n  if (!knownString) {\n    assertString(s);\n  }\n  return mutateFirstLetter(s, 'toLowerCase');\n}\n","import { mutateFirstLetter, assertString } from './funcs/helpers';\n\n// Funcs\nimport slugify from './funcs/slugify';\nimport reverse from './funcs/reverse';\nimport titleize from './funcs/titleize';\nimport capitalize from './funcs/capitalize';\nimport uncapitalize from './funcs/uncapitalize';\n\nexport default {\n  reverse,\n  capitalize,\n  uncapitalize,\n  assertString,\n  slugify,\n  titleize,\n};\n"],"names":[],"mappings":"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"}